name: Citibike Feature Engineering Pipeline
on:
  schedule:
    - cron: '0 1 * * 0'  # Every Sunday at 1:00 AM UTC
  
  workflow_dispatch:

jobs:
  feature_engineering:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install awscli
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi
      
      - name: Create directory structure
        run: |
          mkdir -p data/{raw,processed,transformed}
          mkdir -p src/{utils,pipelines,config}
          touch src/{__init__.py,utils/__init__.py,pipelines/__init__.py,config/__init__.py}
      
      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION || 'us-east-1' }}
      
      - name: Set environment variables
        run: |
          echo "AWS_DEFAULT_REGION=${{ secrets.AWS_REGION || 'us-east-1' }}" >> $GITHUB_ENV
          echo "SAGEMAKER_ROLE_ARN=${{ secrets.SAGEMAKER_ROLE_ARN }}" >> $GITHUB_ENV
          echo "FEATURE_STORE_BUCKET=${{ secrets.FEATURE_STORE_BUCKET }}" >> $GITHUB_ENV
          echo "PYTHONPATH=$PYTHONPATH:$(pwd)" >> $GITHUB_ENV
      
      - name: Update feature_engineering_pipeline.py
        run: |
          cat > tmp_main.py << 'EOF'
          if __name__ == "__main__":
              import sys
              import argparse
              
              # Create argument parser
              parser = argparse.ArgumentParser(description="Run Citibike feature engineering pipeline")
              parser.add_argument("--year-start", type=int, default=2024, help="Start year")
              parser.add_argument("--month-start", type=int, default=1, help="Start month (1-12)")
              parser.add_argument("--year-end", type=int, default=2025, help="End year")
              parser.add_argument("--month-end", type=int, default=1, help="End month (1-12)")
              
              # Parse arguments
              args = parser.parse_args()
              
              # Run the pipeline with the specified parameters
              run_feature_pipeline(
                  year_start=args.year_start,
                  month_start=args.month_start,
                  year_end=args.year_end,
                  month_end=args.month_end
              )
          EOF
          
          # Replace the main function more simply
          sed -i '/if __name__ == "__main__":/,/run_feature_pipeline(/c\\' src/pipelines/feature_engineering_pipeline.py
          cat tmp_main.py >> src/pipelines/feature_engineering_pipeline.py
          rm tmp_main.py
      
      - name: Run Feature Engineering Pipeline
        run: |
          python src/pipelines/feature_engineering_pipeline.py \
            --year-start 2024 \
            --month-start 1 \
            --year-end 2025 \
            --month-end 1
      
      - name: Save feature files artifacts
        uses: actions/upload-artifact@v2  # Changed from v3 to v2
        if: always()
        with:
          name: feature-files
          path: data/transformed/*.parquet
          retention-days: 7
